{
  "name": "hanson",
  "version": "1.1.1",
  "description": "HanSON is JSON with multiline strings and comments. Includes parser and converter.",
  "main": "hanson.js",
  "scripts": {
    "test": "mocha hanson-test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/timjansen/hanson.git"
  },
  "keywords": [
    "json",
    "hanson"
  ],
  "author": {
    "name": "Tim Jansen"
  },
  "licenses": [
    {
      "type": "Public Domain",
      "url": "http://unlicense.org/"
    }
  ],
  "readmeFilename": "README.md",
  "devDependencies": {
    "mocha": "~1.12.0"
  },
  "bin": {
    "hanson": "hansoncmd.js"
  },
  "homepage": "https://github.com/timjansen/hanson",
  "readme": "HanSON - JSON for Humans\n========================\n\nIn Short\n---------\n* HanSON is JSON with comments, multi-line strings and unquoted property names.\n* Comments use JavaScript syntax (//, /**/).\n* Supports backticks as quotes (``) for multi-line strings.\n* You can use either double-quotes (\"\") or single-quotes ('') for single-line strings.\n* Property names do not require quotes if they are valid JavaScript identifiers.\n* Commas after the last list element or property will be ignored.\n* Every JSON string is valid HanSON.\n* HanSON can easily be converted to real JSON. \n\n\n\nIntro\n------\nJSON is a great and very simple data format, especially if you are working with JavaScript. Increasingly configuration \nfiles are written in JSON, and often it is used as a simpler alternative to XML. Unfortunately, when you are creating\nlarger JSON files by hand, you will notice some shortcomings: you need to quote all strings, even object keys; \nyou can not easily have strings with several lines; and you can not include comments. \n\nHanSON is an extension of JSON that fixes those shortcomings with four simple additions to the JSON spec:\n* quotes for strings are optional if they follow JavaScript identifier rules.\n* you can alternatively use backticks, as in ES6's template string literal, as quotes for strings. \n  A backtick-quoted string may span several lines and you are not required to escape regular quote characters,\n  only backticks. Backslashes still need to be escaped, and all other backslash-escape sequences work like in \n  regular JSON.\n* for single-line strings, single quotes ('') are supported in addition to double quotes (\"\")\n* you can use JavaScript comments, both single line (//) and multi-line comments (/* */), in all places where JSON allows whitespace.\n* Commas after the last list element or object property will be ignored. \n  \n  \n\nExample HanSON\n---------------\n```js\n{\n  listName: \"Sesame Street Monsters\", // note that listName needs no quotes\n  content: [\n    {\n      name: \"Cookie Monster\",\n      /* Note the template quotes and unescaped regular quotes in the next string */\n      background: `Cookie Monster used to be a\nmonster that ate everything, especially cookies.\nThese days he is forced to eat \"healthy\" food.`\n    }, {\n      name: \"Herry Monster\",\n      background: `Herry Monster is a furry blue monster with a purple nose.\nHe's mostly retired today.`\n    },    // don't worry, the trailing comma will be ignored\n   ]\n}\n```\n  \n  \nConverting HanSON to JSON\n----------------------------\n*hanson* is a command-line converter that will convert HanSON files to JSON. \nIt is a Nodes.js package that can be installed using npm:\n> npm install -g hanson\n\nAfter installation, convert a single file like this:\n> hanson input.hson output.json\n\nYou can also convert multiple files using the -m options. It will automatically change the file extension to .json:\n> hanson -m input1.hson input2.hson input3.hson input4.hson input5.hson\n\n\n\nGrunt Task to Convert HanSON to JSON\n--------------------------------------\n\nThe Grunt plugin <a href=\"https://github.com/timjansen/grunt-hanson-plugin\">grunt-hanson-plugin</a> can help you converting \nHanSON files to JSON. More about it in its own <a href=\"https://github.com/timjansen/grunt-hanson-plugin\">repository</a>.\n\n\nReading HanSON in JavaScript\n-------------------------------\n*hanson.js* is a simple library for Node.js that provides you with a HanSON object which works pretty much like the *JSON*\nobject, with the only difference being that hanson.parse() will accept HanSON.\n\n```js\nvar hanson = require('hanson');\nvar obj = hanson.parse(hansonSrc);\n```\n \nhanson.stringify() will currently write regular JSON and just invokes JSON.stringify(), but future versions may pretty-print \nthe output and use triple-quotes for multi-line strings instead of '\\n'.\n\nThere's also a toJSON() function that can convert your HanSON source into JSON:\n```js\nvar hanson = require('hanson');\nvar json = hanson.parse(hansonSrc);\n```\n\n\n\nHow Can HanSON Help Me?\n--------------------------\n* If you have configuration or descriptor files (like package.json), you can write them as HanSON and convert them \n  with the command line tool or the Grunt task.\n* Multi-line strings make it feasible to use JSON/HanSON for larger template systems, e.g. to generate static HTML pages. \n  Just write a small script that accepts HanSON and uses your favorite JavaScript template engine to create HTML.\n  Actually this is why I started HanSON - I wanted to replace my XSLT-based template system.\n* You can, of course, extend your application to accept HanSON files.\n\n\n\nFunction to Convert HanSON\n----------------------------\nWant to use HanSON in your program, without including any libraries? Use this function to convert\nHanSON to JSON. It returns a JSON string that can be read using JSON.parse().\n\n```js\nfunction toJSON(input) {\n\t\tvar UNESCAPE_MAP = { '\\\\\"': '\"', \"\\\\`\": \"`\", \"\\\\'\": \"'\" };\n\t\tvar ML_ESCAPE_MAP = {'\\n': '\\\\n', \"\\r\": '\\\\r', \"\\t\": '\\\\t', '\"': '\\\\\"'};\n\t\tfunction unescapeQuotes(r) { return UNESCAPE_MAP[r] || r; }\n\t\t\n\t\treturn input.replace(/`(?:\\\\.|[^`])*`|'(?:\\\\.|[^'])*'|\"(?:\\\\.|[^\"])*\"|\\/\\*[^]*?\\*\\/|\\/\\/.*\\n?/g, // pass 1: remove comments \n\t\t\t\t\t\t\t function(s) {\n\t\t\tif (s.charAt(0) == '/')\n\t\t\t\treturn '';\n\t\t\telse  \n\t\t\t\treturn s;\n\t\t})\n\t\t.replace(/(?:true|false|null)(?=[^\\w_$]|$)|([a-zA-Z_$][\\w_$]*)|`((?:\\\\.|[^`])*)`|'((?:\\\\.|[^'])*)'|\"(?:\\\\.|[^\"])*\"|(,)(?=\\s*[}\\]])/g, // pass 2: requote \n\t\t\t\t\t\t\t function(s, identifier, multilineQuote, singleQuote, lonelyComma) {\n\t\t\tif (lonelyComma)\n\t\t\t\treturn '';\n\t\t\telse if (identifier != null)\n\t\t\t\t\treturn '\"' + identifier + '\"';\n\t\t\telse if (multilineQuote != null)\n\t\t\t\treturn '\"' + multilineQuote.replace(/\\\\./g, unescapeQuotes).replace(/[\\n\\r\\t\"]/g, function(r) { return ML_ESCAPE_MAP[r]; }) + '\"';\n\t\t\telse if (singleQuote != null)\n\t\t\t\treturn '\"' + singleQuote.replace(/\\\\./g, unescapeQuotes).replace(/\"/g, '\\\\\"') + '\"';\n\t\t\telse \n\t\t\t\treturn s;\n\t\t});\n}\n```\n\nChanges\n--------\n* August 14, 2013: First release (0.1.0)\n* August 15, 2013: Replaced triple-quotes with backticks (1.0.0, backward-incompatible change)\n* August 19, 2013: Added support for single-quotes (1.1.0)\n* August 19, 2013: Fixed removing commas followed by comments, support \\r and \\t in multiline quotes (1.1.1)\n\nLicense\n--------\nAll code and documentation has been dedicated to the public domain:\nhttp://unlicense.org/\n\n\n\n\n\n\n  ",
  "_id": "hanson@1.1.1",
  "dist": {
    "shasum": "28629871c2cbf4f5a28a130a684e35ee2c923c7a",
    "tarball": "https://registry.npmjs.org/hanson/-/hanson-1.1.1.tgz"
  },
  "_from": "hanson@*",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "tjansen",
    "email": "tim@tjansen.de"
  },
  "maintainers": [
    {
      "name": "tjansen",
      "email": "tim@tjansen.de"
    }
  ],
  "directories": {},
  "_shasum": "28629871c2cbf4f5a28a130a684e35ee2c923c7a",
  "_resolved": "https://registry.npmjs.org/hanson/-/hanson-1.1.1.tgz"
}
